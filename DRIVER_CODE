# DRIVER_CODE

/*
 * Motor_Driver_Code.c
 *
 * Created: 6/19/2015 10:11:52 PM
 *  Author: Kevin Mak
 */ 


//Equation for waveform frequency

/*
	[F(OCnx)] = [F(clk_I/O)] / [2*N*(1+OCRnx)]        We Chose N = 256
*/

#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdio.h>
#include <stdlib.h>
#include <util/delay.h>



void forwards();
void backwards();
void brake();
void right_turn();
void left_turn();

ISR(TIMER0_COMPA_vect){
	
	if ((PIND & _BV(0)) == 0){
		PORTB ^= (_BV(0) | _BV(1));				//Xor port B (toggles output)
						//explicitly turn off BV0
		//PORTB ^= _BV(1);	
							//turn on BV1
		
		}else if ((PIND & _BV(0)) == 1){
		PORTB ^= _BV(1);
		PORTB &= (~_BV(0));
	}
}
 
int main(void){
	//init_uart();
	//prinf_P(PSTR("System Booted, built %s on %s\n"), __TIME__, __DATE__);

	//PORTD is all inputs, pull-ups enabled
	DDRD = 0;								// enabling port d for inputs
	PORTD = 0xFF;							//pull-ups enabled i.e. they are all 1 and will stay as so until a external force makes it zero (connect to ground)
	
	
	//PORTB 0,1,2 is outputs. Example of _BV() macro
	DDRB |=  _BV(0) | _BV(1);				//| _BV(3) | _BV(4) ;	//enabling port B pins 0 1 amd 2 for output
	
	
		
	// Check if PD. 3 and 4 is cleared
				
			TCCR0A |= 1<<WGM01;				//set CTC (Clear Timer on Compare Match), sets WGM01 to 1
			OCR0A = 24;						//See above equation. Waveform Frequency set to 24
			TIMSK0 = (1<<OCIE0A);			//enable interrupts
			TCCR0B = 1<<CS02;				//gives prescaler of 256 and starts clock
			sei();							//enable global interrupts		
			while(1);	
	
}

/*void forwards(void){		// makes both motors go forward
	
	PORTB ^= (_BV(0) | _BV(1) | _BV(2) | _BV(3));				//both motors go forward
	
}
void backwards(void){		// makes both motors go backward
	
	PORTB ^= (_BV(0) | _BV(2));									//PB0 and PB2 HIGH
	PORTB &= (~(_BV(1) | _BV(3)));								//PB1 and PB3 LOW
	
}
void brake(void){			// makes both motors brake
	
	PORTB ^= (_BV(1) | _BV(3));									//PB1 and PB3 HIGH
	PORTB &= (~(_BV(0) | _BV(2)));								//PB0 and PB2 LOW
}		
void right_turn(void){		// makes R_motor counter clockwise and L_motor clockwise
	
	brake();
	// makes R_motor counter clockwise and L_motor clockwise
	
	
}
void left_turn(void){		// makes L_motor counter clockwise and R_motor clockwise
	
	brake();
	// makes L_motor counter clockwise and R_motor clockwise
	
}		*/
